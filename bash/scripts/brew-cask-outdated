#!/usr/bin/env ruby

require 'pathname'
require 'osx/plist'
require 'semver'

$VERBOSE = nil

ENV['HOMEBREW_CACHE'] = `brew --cache 2>&1`.chomp
ENV['HOMEBREW_PREFIX'] = `brew --prefix 2>&1`.chomp
ENV['HOMEBREW_REPOSITORY'] = `brew --repository 2>&1`.chomp
ENV['HOMEBREW_LIBRARY'] = File.join(ENV['HOMEBREW_REPOSITORY'], 'Library')
ENV['HOMEBREW_CELLAR'] = `brew --cellar 2>&1`.chomp
ENV['HOMEBREW_BREW_FILE'] = File.join(ENV['HOMEBREW_REPOSITORY'], 'Library', 'Homebrew', 'brew.sh')
ENV['HOMEBREW_OSX_VERSION'] = `/usr/bin/sw_vers -productVersion`.chomp
ENV['HOMEBREW_OS_VERSION'] = "Mac OS X #{ENV['HOMEBREW_OSX_VERSION']}"

$LOAD_PATH.unshift File.join(ENV['HOMEBREW_REPOSITORY'], 'Library', 'Homebrew')
require 'global'
require 'tap'

cask_tap = Tap.names.find { |tap| tap =~ /cask/ }
unless cask_tap
  abort('It seems cask is not isntalled yet. Please, see http://caskroom.io')
end

$LOAD_PATH.unshift File.join($LOAD_PATH.first, 'cask', 'lib')
require 'hbc'

def plist_path(cask)
  cask_app_dir = Dir.glob(File.join(cask.caskroom_path, '*'))
    .reject { |dir| dir == cask.metadata_master_container_path }
    .first

  [cask_app_dir, '/Applications', '~/Applications']
    .map { |dir| plist(dir, cask) }
    .detect { |file| File.exist?(file) }
end

def plist(dir, cask)
  File.join(dir, app_name(cask), 'Contents', 'Info.plist')
end

def app_name(cask)
  cask.artifacts[:app]&.first&.target&.basename.to_s
end

def current_version(file)
  return '?' unless File.exist?(file.to_s)
  plist_hash = OSX::PropertyList.load_file(file)
  [
    plist_hash['CFBundleShortVersionString'],
    [
      plist_hash['CFBundleShortVersionString'],
      plist_hash['CFBundleVersion']
    ].compact.join('.')
  ]
end

def latest_version(cask)
  version = cask.version
  return version if version == 'latest'
  return '?' if version.nil?
  version
    .split('.')
    .map { |num| num[/\d+/] }
    .compact
    .join('.')
end

Hbc.installed.each do |cask|
  next unless cask.installed?
  current_short, current_full = current_version(plist_path(cask))
  latest = latest_version(cask)
  next if current_short == latest || current_full == latest
  puts "#{cask} (#{current_short} < #{latest})"
end
